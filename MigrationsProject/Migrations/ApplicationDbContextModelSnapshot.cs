// <auto-generated />
using System;
using DataAccess.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MigrationsProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Database.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExerciseId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<decimal?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("average_rating")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DifficultyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("difficulty_level");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("EquipmentNeeded")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("equipment_needed");

                    b.Property<string>("ExerciseType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("exercise_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("popularity");

                    b.Property<string>("Precautions")
                        .HasColumnType("text")
                        .HasColumnName("precautions");

                    b.Property<int?>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<int?>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tags");

                    b.HasKey("ExerciseId")
                        .HasName("exercises_pkey");

                    b.HasIndex("AuthorId");

                    b.ToTable("exercises");
                });

            modelBuilder.Entity("DataAccess.Database.ExerciseMedia", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("media_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MediaId"));

                    b.Property<string>("DriveFileId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("drive_file_id");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<string>("MediaType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("media_url");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("MediaId")
                        .HasName("exercise_media_pkey");

                    b.HasIndex("ExerciseId");

                    b.ToTable("exercise_media");
                });

            modelBuilder.Entity("DataAccess.Database.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("TagId")
                        .HasName("tags_pkey");

                    b.HasIndex(new[] { "Name" }, "tags_name_key")
                        .IsUnique();

                    b.ToTable("tags");
                });

            modelBuilder.Entity("DataAccess.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Goals")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("goals");

                    b.Property<string>("GoogleUserId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("google_user_id");

                    b.Property<decimal?>("Height")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("height");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhysicalActivityLevel")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("physical_activity_level");

                    b.Property<string>("PreferredTrainingType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferred_training_type");

                    b.Property<string>("RegisteredVia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("registered_via");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registration_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("weight");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "GoogleUserId" }, "users_google_user_id_key")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("DataAccess.Database.UserWorkout", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "WorkoutId")
                        .HasName("user_workouts_pkey");

                    b.HasIndex("WorkoutId");

                    b.ToTable("user_workouts");
                });

            modelBuilder.Entity("DataAccess.Database.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    b.Property<decimal?>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("average_rating")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("CaloriesBurned")
                        .HasColumnType("integer")
                        .HasColumnName("calories_burned");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<string>("Equipment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("equipment");

                    b.Property<string>("Goals")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("goals");

                    b.Property<string>("Intensity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("intensity");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level");

                    b.Property<string>("MuscleGroups")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("muscle_groups");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Popularity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("popularity");

                    b.Property<string>("Schedule")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("schedule");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tags");

                    b.Property<string>("WorkoutTypes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("workout_types");

                    b.HasKey("WorkoutId")
                        .HasName("workouts_pkey");

                    b.HasIndex("AuthorId");

                    b.ToTable("workouts");
                });

            modelBuilder.Entity("DataAccess.Database.WorkoutExercise", b =>
                {
                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<int?>("Reps")
                        .HasColumnType("integer")
                        .HasColumnName("reps");

                    b.Property<int?>("RestTime")
                        .HasColumnType("integer")
                        .HasColumnName("rest_time");

                    b.Property<int?>("Sequence")
                        .HasColumnType("integer")
                        .HasColumnName("sequence");

                    b.Property<int?>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.HasKey("WorkoutId", "ExerciseId")
                        .HasName("workout_exercises_pkey");

                    b.HasIndex("ExerciseId");

                    b.ToTable("workout_exercises");
                });

            modelBuilder.Entity("DataAccess.Database.WorkoutReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("review_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.HasKey("ReviewId")
                        .HasName("workout_reviews_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("workout_reviews");
                });

            modelBuilder.Entity("ExerciseTag", b =>
                {
                    b.Property<int>("ExerciseId")
                        .HasColumnType("integer")
                        .HasColumnName("exercise_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("ExerciseId", "TagId")
                        .HasName("exercise_tags_pkey");

                    b.HasIndex("TagId");

                    b.ToTable("exercise_tags", (string)null);
                });

            modelBuilder.Entity("WorkoutTag", b =>
                {
                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer")
                        .HasColumnName("workout_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("WorkoutId", "TagId")
                        .HasName("workout_tags_pkey");

                    b.HasIndex("TagId");

                    b.ToTable("workout_tags", (string)null);
                });

            modelBuilder.Entity("DataAccess.Database.Exercise", b =>
                {
                    b.HasOne("DataAccess.Database.User", "Author")
                        .WithMany("Exercises")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("exercises_author_id_fkey");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DataAccess.Database.ExerciseMedia", b =>
                {
                    b.HasOne("DataAccess.Database.Exercise", "Exercise")
                        .WithMany("ExerciseMedia")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("exercise_media_exercise_id_fkey");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("DataAccess.Database.UserWorkout", b =>
                {
                    b.HasOne("DataAccess.Database.User", "User")
                        .WithMany("UserWorkouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_workouts_user_id_fkey");

                    b.HasOne("DataAccess.Database.Workout", "Workout")
                        .WithMany("UserWorkouts")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_workouts_workout_id_fkey");

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("DataAccess.Database.Workout", b =>
                {
                    b.HasOne("DataAccess.Database.User", "Author")
                        .WithMany("Workouts")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("workouts_author_id_fkey");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DataAccess.Database.WorkoutExercise", b =>
                {
                    b.HasOne("DataAccess.Database.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .IsRequired()
                        .HasConstraintName("workout_exercises_exercise_id_fkey");

                    b.HasOne("DataAccess.Database.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workout_exercises_workout_id_fkey");

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("DataAccess.Database.WorkoutReview", b =>
                {
                    b.HasOne("DataAccess.Database.User", "User")
                        .WithMany("WorkoutReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("workout_reviews_user_id_fkey");

                    b.HasOne("DataAccess.Database.Workout", "Workout")
                        .WithMany("WorkoutReviews")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("workout_reviews_workout_id_fkey");

                    b.Navigation("User");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("ExerciseTag", b =>
                {
                    b.HasOne("DataAccess.Database.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exercise_tags_exercise_id_fkey");

                    b.HasOne("DataAccess.Database.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exercise_tags_tag_id_fkey");
                });

            modelBuilder.Entity("WorkoutTag", b =>
                {
                    b.HasOne("DataAccess.Database.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workout_tags_tag_id_fkey");

                    b.HasOne("DataAccess.Database.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("workout_tags_workout_id_fkey");
                });

            modelBuilder.Entity("DataAccess.Database.Exercise", b =>
                {
                    b.Navigation("ExerciseMedia");

                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("DataAccess.Database.User", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("UserWorkouts");

                    b.Navigation("WorkoutReviews");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("DataAccess.Database.Workout", b =>
                {
                    b.Navigation("UserWorkouts");

                    b.Navigation("WorkoutExercises");

                    b.Navigation("WorkoutReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
